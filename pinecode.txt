//@version=5
indicator("HPMR 60-Period look-back", overlay = true)

// Define inputs
aggregationPeriod = input.timeframe("1H", title = "timeframe", options = ["5m", "10m", "15m", "30m", "45m", "1H"])
bars_back = input.int(60, title="bars back")
step = input.float(23, title="step")

numericTimeframe = aggregationPeriod == "5m" ? "5" : aggregationPeriod == "10m" ? "10" : aggregationPeriod == "15m" ? "15" : aggregationPeriod == "30m" ? "30" : aggregationPeriod == "45m" ? "45" : aggregationPeriod == "1H" ? "60" : na

hourhigh = request.security(syminfo.tickerid, numericTimeframe, high)
hourlow = request.security(syminfo.tickerid, numericTimeframe, low)
houropen = request.security(syminfo.tickerid, numericTimeframe, open)

var pricerange = 0.
pricerange := hourhigh - hourlow

// Get range for each hour over the last 60 periods

x = 0.0
for i = 1 to bars_back + 1
    x := x + pricerange[step * i]

s = x / bars_back
t = s / 2

hpmr_avg = t
hpmr_range = s

uppertopline = (hourlow + hpmr_range)
upperlowerline = uppertopline + 2
lowerlowerline = (hourhigh - hpmr_range)
lowertopline = lowerlowerline - 2

p1 = plot(uppertopline, title="Upper High", color=color.blue)
p2 = plot(upperlowerline, title="Upper Low", color=color.blue)
p3 = plot(lowerlowerline, title="Lower High", color=color.red)
p4 = plot(lowertopline, title="Lower Low", color=color.red)

fill(p1, p2, color=color.new(color.blue, 90))
fill(p3, p4, color=color.new(color.red, 90))